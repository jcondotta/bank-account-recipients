name: Microservice CI with LocalStack Docker Cache and Integration Tests

on:
  push:
    branches:
      - main

jobs:
  localstack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK with Maven cache
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: maven  # Automatically caches Maven dependencies

      - name: Cache LocalStack image
        id: cache-localstack
        uses: actions/cache@v3
        with:
          path: /tmp/localstack-cache
          key: ${{ runner.os }}-localstack-3.7.0

      - name: Load LocalStack Docker image from cache
        if: steps.cache-localstack.outputs.cache-hit == 'true'
        run: docker load -i /tmp/localstack-cache/localstack.tar

      - name: Log and Pull LocalStack Docker image if not cached
        if: steps.cache-localstack.outputs.cache-hit != 'true'
        run: |
          echo "LocalStack image not found in cache, pulling from Docker Hub..."
          docker pull localstack/localstack:3.7.0
          
          echo "Saving LocalStack image to cache..."
          mkdir -p /tmp/localstack-cache
          docker save localstack/localstack:3.7.0 -o /tmp/localstack-cache/localstack.tar

      - name: Start LocalStack manually
        run: |
          echo "Starting LocalStack container..."
          docker run -d --name localstack \
            -p 127.0.0.1:4566:4566 \
            -e SERVICES=dynamodb \
            localstack/localstack:3.7.0

          echo "Waiting for LocalStack to be fully ready..."

#          MAX_ATTEMPTS=30
#          SLEEP_TIME=10
#
#          # Check the Docker container's health status before attempting curl
#          for i in $(seq 1 $MAX_ATTEMPTS); do
#            echo "Checking LocalStack container health... attempt #$i"
#
#            # Check the container's health status directly using Docker
#            CONTAINER_HEALTH=$(docker inspect --format='{{json .State.Health.Status}}' localstack)
#
#            if [ "$CONTAINER_HEALTH" == "\"healthy\"" ]; then
#              echo "LocalStack container is healthy!"
#              break
#            else
#              echo "LocalStack container is not healthy yet. Current status: $CONTAINER_HEALTH"
#            fi
#
#            echo "Sleeping for $SLEEP_TIME seconds..."
#            sleep $SLEEP_TIME
#          done
#
#          # Once container is healthy, start checking the health endpoint specifically for DynamoDB
#          for i in $(seq 1 $MAX_ATTEMPTS); do
#            echo "Checking LocalStack DynamoDB health... attempt #$i"
#
#            # Verify that ports are open and accessible
#            netstat -tuln | grep 4566 || echo "Port 4566 is not open yet"
#
#            # Capture the curl response
#            HEALTH_RESPONSE=$(curl --max-time 10 -s http://localhost:4566/health)
#
#            # Print the raw response for debugging
#            echo "Raw health response: $HEALTH_RESPONSE"
#
#            # Ensure the response is valid JSON before using jq
#            if echo "$HEALTH_RESPONSE" | jq empty > /dev/null 2>&1; then
#              HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r .services.dynamodb)
#
#              if [ "$HEALTH_STATUS" == "running" ]; then
#                echo "LocalStack DynamoDB is running!"
#                break
#              else
#                echo "LocalStack DynamoDB is not running yet. Current status: $HEALTH_STATUS"
#              fi
#            else
#              echo "Invalid JSON response: $HEALTH_RESPONSE"
#            fi
#
#            echo "LocalStack not ready yet. Sleeping for $SLEEP_TIME seconds..."
#            sleep $SLEEP_TIME
#          done
#
#          if [ "$HEALTH_STATUS" != "running" ]; then
#            echo "LocalStack failed to start after $MAX_ATTEMPTS attempts."
#            docker logs localstack
#            exit 1
#          fi

      - name: Build and run unit tests
        run: mvn clean test
