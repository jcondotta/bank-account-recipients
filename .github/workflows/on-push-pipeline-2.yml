name: Linux 2023 Lambda Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      LINUX_2023_LAMBDA_FUNCTION_NAME: "bank-account-recipients-java-17-graalvm"
      AWS_REGION: "eu-west-3"
      ARTIFACT_NAME: "function.zip"
      GRAALVM_VERSION: "17"
      GRAALVM_ARCH: "aarch64"  # Ensure the correct architecture if required

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up GraalVM JDK with Maven cache
      - name: Set up GraalVM JDK with Maven cache
        uses: graalvm/setup-graalvm@v1
        with:
          version: '17'  # Ensure GraalVM version matches your local setup
          java-version: '17'
          components: 'native-image'
          cache: maven
          architecture: 'aarch64'  # Set to aarch64 if you want to force this architecture

      # Build the GraalVM native image and package it as a ZIP for AWS Lambda
      - name: Build Native Image and Package as Zip
        run: |
          ./mvnw package -Dpackaging=docker-native

      # Verify the zip file is created
      - name: List the target directory
        run: |
          ls -al target

      # Configure AWS credentials for deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Deploy to AWS Lambda
      - name: Deploy to Linux 2023 AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LINUX_2023_LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://target/${{ env.ARTIFACT_NAME }}
