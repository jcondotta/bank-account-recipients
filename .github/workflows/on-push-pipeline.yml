name: Microservice CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Phase 1: Build and Package
  build-package:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up JDK and Cache Maven Dependencies
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.java-version }}
          cache: maven

      - name: Build and Package the Java Application
        run: mvn clean package --batch-mode

      - name: Upload Packaged Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bank-account-recipients
          path: target/bank-account-recipients-0.1.jar


#  # Phase 2: Code Linting and Static Analysis
#  lint:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Source Code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: '17'
#
#      - name: Run Code Linter (Checkstyle)
#        run: mvn checkstyle:check

  # Phase 3: Run Integration Tests with LocalStack
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-package
    timeout-minutes: 25

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Start LocalStack Services for Integration Tests
        run: |
          echo "Starting LocalStack container..."
          docker run -d --name localstack \
            -p 127.0.0.1:4566:4566 \
            -e SERVICES=dynamodb \
            localstack/localstack:${{ env.LOCALSTACK_VERSION }}

      - name: Run Integration Tests with Failsafe Plugin
        run: mvn failsafe:integration-test --batch-mode

  # Phase 4: Build and Push Docker Image to Docker Hub
  docker:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download Packaged Artifact
        uses: actions/download-artifact@v3
        with:
          name: bank-account-recipients

      - name: Build Docker Image from Packaged Artifact
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/bank-account-recipients:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/bank-account-recipients:latest

  # Phase 5: Deploy Application to AWS Lambda
  deploy:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Deploy Packaged Artifact to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name bank-account-recipients-java-17 \
            --zip-file fileb://target/bank-account-recipients-0.1.jar

      - name: Create GitHub Issue on Deployment Failure
        if: failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[AUTO] AWS Lambda Deployment Failed',
              body: 'The deployment job failed. Please investigate the issue.'
            })
